#!/usr/bin/env node

'use strict';

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

/**
 * Execute simple shell command (async wrapper).
 * @param {String} cmd
 * @return {Object} { stdout: String, stderr: String }
 */
var sh = function () {
  var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(cmd) {
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt('return', new Promise(function (resolve, reject) {
              (0, _child_process.exec)(cmd, function (err, stdout, stderr) {
                if (err) {
                  reject(err);
                } else {
                  resolve({ stdout: stdout, stderr: stderr });
                }
              });
            }));

          case 1:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function sh(_x) {
    return _ref.apply(this, arguments);
  };
}();

// Print ascii art and Skan.io heading
var printHeadingAndArt = function () {
  var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {
    return _regenerator2.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            return _context2.abrupt('return', new Promise(function (resolve, reject) {
              var image = new _asciiArt2.default.image({
                width: 80,
                filepath: './skan.png',
                alphabet: 'variant4'
              }).font('DOCS.', 'Doom', 'cyan', function (ascii) {
                console.log(ascii);
                resolve();
              });
            }));

          case 1:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));

  return function printHeadingAndArt() {
    return _ref2.apply(this, arguments);
  };
}();

var updatePackageJson = function () {
  var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(pkg, path) {
    return _regenerator2.default.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            return _context3.abrupt('return', new Promise(function (resolve, reject) {
              try {
                if (!pkg.scripts) {
                  pkg.scripts = {};
                }
                console.log('');
                console.log('' + _chalk2.default.yellow('Adding \'docs:proj\', \'docs:proj:serve\', \'docs:proj:build\' scripts.'));

                pkg.scripts['docs:proj'] = 'echo \'HELLO WORLD\'';
                pkg.scripts['docs:proj:build'] = 'echo \'HELLO WORLD\'';
                pkg.scripts['docs:proj:serve'] = 'echo \'HELLO WORLD\'';

                _fs2.default.writeFile(path, JSON.stringify(pkg, null, 2), function (err) {
                  if (err) {
                    reject(err);
                  }

                  console.log('' + _chalk2.default.yellow('Successfully updated ' + path));
                  console.log('');

                  resolve();
                });

                // TODO uncomment this when ready to remove package.json
                // fs.unlink(path, (err)=> {
                //   if (err) {
                //     reject(err);
                //   }
                //
                //   console.log(`${chalk.yellow(`Removed (outdated) ${path}`)}`);
                //   console.log('');
                // });
              } catch (err) {
                reject(err);
              }
            }));

          case 1:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee3, this);
  }));

  return function updatePackageJson(_x2, _x3) {
    return _ref3.apply(this, arguments);
  };
}();

// Main functionality!
var main = function () {
  var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4() {
    var args, packagePath, serveDocs, pkgPath, pkgJson, _ref5, stdout, stderr, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, line, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, _line, _ref6, _stdout, _stderr, _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, _line2, _iteratorNormalCompletion4, _didIteratorError4, _iteratorError4, _iterator4, _step4, _line3, _ref7, _stdout2, _stderr2, _iteratorNormalCompletion5, _didIteratorError5, _iteratorError5, _iterator5, _step5, _line4, _iteratorNormalCompletion6, _didIteratorError6, _iteratorError6, _iterator6, _step6, _line5;

    return _regenerator2.default.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            args = parser.parseArgs(process.argv.slice(2));
            packagePath = args.packagePath, serveDocs = args.serveDocs;
            pkgPath = packagePath === null ? _path2.default.resolve('.', 'package.json') : _path2.default.resolve(packagePath, 'package.json');
            pkgJson = null;
            _context4.prev = 4;

            pkgJson = require(pkgPath);
            _context4.next = 12;
            break;

          case 8:
            _context4.prev = 8;
            _context4.t0 = _context4['catch'](4);

            console.log('' + _chalk2.default.red(_context4.t0));
            return _context4.abrupt('return');

          case 12:
            _context4.next = 14;
            return printHeadingAndArt();

          case 14:

            console.log('');
            console.log('' + _chalk2.default.yellow('Welcome to Skan.io doctool.'));
            console.log('');
            console.log('' + _chalk2.default.yellow('==> Downloading and installing docsify-cli...'));

            _context4.prev = 18;
            _context4.next = 21;
            return sh('npm i -g docsify-cli');

          case 21:
            _ref5 = _context4.sent;
            stdout = _ref5.stdout;
            stderr = _ref5.stderr;
            _iteratorNormalCompletion = true;
            _didIteratorError = false;
            _iteratorError = undefined;
            _context4.prev = 27;


            for (_iterator = stderr.split('\n')[Symbol.iterator](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              line = _step.value;

              console.log('' + _chalk2.default.white(_chalk2.default.bold(line)));
            }
            _context4.next = 35;
            break;

          case 31:
            _context4.prev = 31;
            _context4.t1 = _context4['catch'](27);
            _didIteratorError = true;
            _iteratorError = _context4.t1;

          case 35:
            _context4.prev = 35;
            _context4.prev = 36;

            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }

          case 38:
            _context4.prev = 38;

            if (!_didIteratorError) {
              _context4.next = 41;
              break;
            }

            throw _iteratorError;

          case 41:
            return _context4.finish(38);

          case 42:
            return _context4.finish(35);

          case 43:
            _iteratorNormalCompletion2 = true;
            _didIteratorError2 = false;
            _iteratorError2 = undefined;
            _context4.prev = 46;
            for (_iterator2 = stdout.split('\n')[Symbol.iterator](); !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
              _line = _step2.value;

              console.log('' + _chalk2.default.green(_line));
            }
            _context4.next = 54;
            break;

          case 50:
            _context4.prev = 50;
            _context4.t2 = _context4['catch'](46);
            _didIteratorError2 = true;
            _iteratorError2 = _context4.t2;

          case 54:
            _context4.prev = 54;
            _context4.prev = 55;

            if (!_iteratorNormalCompletion2 && _iterator2.return) {
              _iterator2.return();
            }

          case 57:
            _context4.prev = 57;

            if (!_didIteratorError2) {
              _context4.next = 60;
              break;
            }

            throw _iteratorError2;

          case 60:
            return _context4.finish(57);

          case 61:
            return _context4.finish(54);

          case 62:
            _context4.next = 67;
            break;

          case 64:
            _context4.prev = 64;
            _context4.t3 = _context4['catch'](18);

            console.log('' + _chalk2.default.red(_context4.t3));

          case 67:

            console.log('' + _chalk2.default.yellow('docsify-cli successfully installed.'));
            console.log('');
            console.log('' + _chalk2.default.yellow('==> Downloading and installing npm-run-all...'));

            _context4.prev = 70;
            _context4.next = 73;
            return sh('npm i npm-run-all');

          case 73:
            _ref6 = _context4.sent;
            _stdout = _ref6.stdout;
            _stderr = _ref6.stderr;
            _iteratorNormalCompletion3 = true;
            _didIteratorError3 = false;
            _iteratorError3 = undefined;
            _context4.prev = 79;


            for (_iterator3 = _stderr.split('\n')[Symbol.iterator](); !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
              _line2 = _step3.value;

              console.log('' + _chalk2.default.white(_chalk2.default.bold(_line2)));
            }
            _context4.next = 87;
            break;

          case 83:
            _context4.prev = 83;
            _context4.t4 = _context4['catch'](79);
            _didIteratorError3 = true;
            _iteratorError3 = _context4.t4;

          case 87:
            _context4.prev = 87;
            _context4.prev = 88;

            if (!_iteratorNormalCompletion3 && _iterator3.return) {
              _iterator3.return();
            }

          case 90:
            _context4.prev = 90;

            if (!_didIteratorError3) {
              _context4.next = 93;
              break;
            }

            throw _iteratorError3;

          case 93:
            return _context4.finish(90);

          case 94:
            return _context4.finish(87);

          case 95:
            _iteratorNormalCompletion4 = true;
            _didIteratorError4 = false;
            _iteratorError4 = undefined;
            _context4.prev = 98;
            for (_iterator4 = _stdout.split('\n')[Symbol.iterator](); !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
              _line3 = _step4.value;

              console.log('' + _chalk2.default.green(_line3));
            }
            _context4.next = 106;
            break;

          case 102:
            _context4.prev = 102;
            _context4.t5 = _context4['catch'](98);
            _didIteratorError4 = true;
            _iteratorError4 = _context4.t5;

          case 106:
            _context4.prev = 106;
            _context4.prev = 107;

            if (!_iteratorNormalCompletion4 && _iterator4.return) {
              _iterator4.return();
            }

          case 109:
            _context4.prev = 109;

            if (!_didIteratorError4) {
              _context4.next = 112;
              break;
            }

            throw _iteratorError4;

          case 112:
            return _context4.finish(109);

          case 113:
            return _context4.finish(106);

          case 114:
            _context4.next = 119;
            break;

          case 116:
            _context4.prev = 116;
            _context4.t6 = _context4['catch'](70);

            console.log('' + _chalk2.default.red(_context4.t6));

          case 119:

            console.log('' + _chalk2.default.yellow('npm-run-all successfully installed.'));

            console.log('');
            console.log('' + _chalk2.default.yellow('==> Updating package.json scripts...'));

            _context4.next = 124;
            return updatePackageJson(pkgJson, pkgPath);

          case 124:

            console.log('');
            console.log('' + _chalk2.default.yellow('==> Downloading and installing serve...'));

            _context4.prev = 126;
            _context4.next = 129;
            return sh('npm i serve');

          case 129:
            _ref7 = _context4.sent;
            _stdout2 = _ref7.stdout;
            _stderr2 = _ref7.stderr;
            _iteratorNormalCompletion5 = true;
            _didIteratorError5 = false;
            _iteratorError5 = undefined;
            _context4.prev = 135;


            for (_iterator5 = _stderr2.split('\n')[Symbol.iterator](); !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
              _line4 = _step5.value;

              console.log('' + _chalk2.default.white(_chalk2.default.bold(_line4)));
            }
            _context4.next = 143;
            break;

          case 139:
            _context4.prev = 139;
            _context4.t7 = _context4['catch'](135);
            _didIteratorError5 = true;
            _iteratorError5 = _context4.t7;

          case 143:
            _context4.prev = 143;
            _context4.prev = 144;

            if (!_iteratorNormalCompletion5 && _iterator5.return) {
              _iterator5.return();
            }

          case 146:
            _context4.prev = 146;

            if (!_didIteratorError5) {
              _context4.next = 149;
              break;
            }

            throw _iteratorError5;

          case 149:
            return _context4.finish(146);

          case 150:
            return _context4.finish(143);

          case 151:
            _iteratorNormalCompletion6 = true;
            _didIteratorError6 = false;
            _iteratorError6 = undefined;
            _context4.prev = 154;
            for (_iterator6 = _stdout2.split('\n')[Symbol.iterator](); !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
              _line5 = _step6.value;

              console.log('' + _chalk2.default.green(_line5));
            }
            _context4.next = 162;
            break;

          case 158:
            _context4.prev = 158;
            _context4.t8 = _context4['catch'](154);
            _didIteratorError6 = true;
            _iteratorError6 = _context4.t8;

          case 162:
            _context4.prev = 162;
            _context4.prev = 163;

            if (!_iteratorNormalCompletion6 && _iterator6.return) {
              _iterator6.return();
            }

          case 165:
            _context4.prev = 165;

            if (!_didIteratorError6) {
              _context4.next = 168;
              break;
            }

            throw _iteratorError6;

          case 168:
            return _context4.finish(165);

          case 169:
            return _context4.finish(162);

          case 170:
            _context4.next = 175;
            break;

          case 172:
            _context4.prev = 172;
            _context4.t9 = _context4['catch'](126);

            console.log('' + _chalk2.default.red(_context4.t9));

          case 175:

            console.log('' + _chalk2.default.yellow('serve successfully installed.'));

          case 176:
          case 'end':
            return _context4.stop();
        }
      }
    }, _callee4, this, [[4, 8], [18, 64], [27, 31, 35, 43], [36,, 38, 42], [46, 50, 54, 62], [55,, 57, 61], [70, 116], [79, 83, 87, 95], [88,, 90, 94], [98, 102, 106, 114], [107,, 109, 113], [126, 172], [135, 139, 143, 151], [144,, 146, 150], [154, 158, 162, 170], [163,, 165, 169]]);
  }));

  return function main() {
    return _ref4.apply(this, arguments);
  };
}();

var _child_process = require('child_process');

var _argparse = require('argparse');

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _asciiArt = require('ascii-art');

var _asciiArt2 = _interopRequireDefault(_asciiArt);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var version = '0.0.1';

// Command line arguments parser
var parser = new _argparse.ArgumentParser({
  version: version,
  addHelp: true,
  description: 'A command line tool to help install skan.io doc tools and serve example usage',
  epilog: '(DEFAULT) Will download docsify-cli, add \'docs:proj\', \'docs:proj:serve\',\n  and docs:proj:build scripts to your project package-lock.json, will start a\n  gh-pages branch on your repo at the current HEAD and will tag it with version\n  v0.0.1',
  prog: 'npm start'
});

var defaultPath = null;
var defaultServe = false;

parser.addArgument(['-p', '--package'], {
  help: 'Choose the path to your package.json',
  action: 'store',
  defaultValue: defaultPath,
  dest: 'packagePath',
  metavar: '<PATH>'
});

parser.addArgument(['-s', '--serve'], {
  help: 'Serve your documentation after setup',
  action: 'storeTrue',
  defaultValue: false,
  dest: 'serveDocs'
});;;

;;

main();
