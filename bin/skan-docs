#!/usr/bin/env node

'use strict';

/**
 * Source code for the 'skan-docs' binary
 * @module Configure
 * @example
 * // bash shell
 * skan-docs -p ./src --serve
 */

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

/**
 * Execute simple shell command (async wrapper).
 *
 * @param {String} cmd Shell command to be run (bash)
 * @return {Object} { stdout: String, stderr: String }
 */
var sh = function () {
  var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(cmd) {
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt('return', new Promise(function (resolve, reject) {
              (0, _child_process.exec)(cmd, function (err, stdout, stderr) {
                if (err) {
                  reject(err);
                } else {
                  resolve({ stdout: stdout, stderr: stderr });
                }
              });
            }));

          case 1:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function sh(_x) {
    return _ref.apply(this, arguments);
  };
}();

/**
 * Given a shell command, try the command and catch or log
 * the error or response.
 *
 * @param  {String} cmd Shell command to be run (bash)
 * @return {Void}     Logs errors and stdout
 */
var tryLogCommand = function () {
  var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(cmd) {
    var _ref3, stdout, stderr, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, line, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, _line;

    return _regenerator2.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.prev = 0;
            _context2.next = 3;
            return sh(cmd);

          case 3:
            _ref3 = _context2.sent;
            stdout = _ref3.stdout;
            stderr = _ref3.stderr;
            _iteratorNormalCompletion = true;
            _didIteratorError = false;
            _iteratorError = undefined;
            _context2.prev = 9;


            for (_iterator = stderr.split('\n')[Symbol.iterator](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              line = _step.value;

              console.log('' + _chalk2.default.white(_chalk2.default.bold(line)));
            }
            _context2.next = 17;
            break;

          case 13:
            _context2.prev = 13;
            _context2.t0 = _context2['catch'](9);
            _didIteratorError = true;
            _iteratorError = _context2.t0;

          case 17:
            _context2.prev = 17;
            _context2.prev = 18;

            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }

          case 20:
            _context2.prev = 20;

            if (!_didIteratorError) {
              _context2.next = 23;
              break;
            }

            throw _iteratorError;

          case 23:
            return _context2.finish(20);

          case 24:
            return _context2.finish(17);

          case 25:
            _iteratorNormalCompletion2 = true;
            _didIteratorError2 = false;
            _iteratorError2 = undefined;
            _context2.prev = 28;
            for (_iterator2 = stdout.split('\n')[Symbol.iterator](); !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
              _line = _step2.value;

              console.log('' + _chalk2.default.green(_line));
            }
            _context2.next = 36;
            break;

          case 32:
            _context2.prev = 32;
            _context2.t1 = _context2['catch'](28);
            _didIteratorError2 = true;
            _iteratorError2 = _context2.t1;

          case 36:
            _context2.prev = 36;
            _context2.prev = 37;

            if (!_iteratorNormalCompletion2 && _iterator2.return) {
              _iterator2.return();
            }

          case 39:
            _context2.prev = 39;

            if (!_didIteratorError2) {
              _context2.next = 42;
              break;
            }

            throw _iteratorError2;

          case 42:
            return _context2.finish(39);

          case 43:
            return _context2.finish(36);

          case 44:
            _context2.next = 49;
            break;

          case 46:
            _context2.prev = 46;
            _context2.t2 = _context2['catch'](0);

            console.log('' + _chalk2.default.red(_context2.t2));

          case 49:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, this, [[0, 46], [9, 13, 17, 25], [18,, 20, 24], [28, 32, 36, 44], [37,, 39, 43]]);
  }));

  return function tryLogCommand(_x2) {
    return _ref2.apply(this, arguments);
  };
}();

/**
 * Print the skan logo ascii art.
 *
 * @return {Void} Ascii art printed to console
 */
// Print ascii art and Skan.io heading
var printHeadingAndArt = function () {
  var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3() {
    return _regenerator2.default.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            return _context3.abrupt('return', new Promise(function (resolve, reject) {
              var image = new _asciiArt2.default.image({
                width: 80,
                filepath: _path2.default.join(__dirname, 'skan.png'),
                alphabet: 'variant4'
              }).font('DOCS.', 'Doom', 'cyan', function (ascii) {
                console.log(ascii);
                resolve();
              });
            }));

          case 1:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee3, this);
  }));

  return function printHeadingAndArt() {
    return _ref4.apply(this, arguments);
  };
}();

/**
 * Add script commands to the passed package json object.
 *
 * @param  {Object} pkg  { package.json }
 * @param  {String} path Path to write updated package.json out to
 * @return {Promise}     Promise, when resolved has updated package.json
 */

/**
 * Add script commands to the passed package json object.
 * @param  {Object} pkg  { package.json }
 * @param  {String} path Path to write updated package.json out to
 * @param  {Boolean} codeDocs  True if include code docs scripts
 * @param  {Boolean} reactDocs True if include react style guide scripts
 * @return {Promise}     Promise, when resolved has updated package.json
 */
var updatePackageJson = function () {
  var _ref5 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4(pkg, path, codeDocs, reactDocs) {
    return _regenerator2.default.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            return _context4.abrupt('return', new Promise(function (resolve, reject) {
              try {
                if (!pkg.scripts) {
                  pkg.scripts = {};
                }
                console.log('');
                console.log('' + _chalk2.default.yellow('Adding docs and lint scripts to package.json.'));

                if (codeDocs && reactDocs) {
                  pkg.scripts['docs'] = 'run-s -s docs:code docs:proj';
                  pkg.scripts['docs:code'] = 'run-s docs:clear docs:build docs:clear';
                  pkg.scripts['docs:proj'] = 'docsify serve docs';
                  pkg.scripts['docs:clear'] = 'rm -rf ./out/';
                  pkg.scripts['docs:build'] = 'jsdoc ./src || exit 0 && skan-convert -p ./out -o ./docs || exit 0';
                  pkg.scripts['lint'] = 'run-s -s lint:*';
                  pkg.scripts['lint:md'] = 'remark -i .gitignore --no-stdout --use remark-lint *.md';
                  pkg.scripts['lint:docs'] = 'remark -i .gitignore /docs --no-stdout --use remark-lint docs/*.md';

                  // TODO add react style guide scripts
                } else if (!codeDocs) {
                  pkg.scripts['docs'] = 'run-s -s docs:proj';
                  pkg.scripts['docs:proj'] = 'docsify serve docs';
                  pkg.scripts['lint'] = 'run-s -s lint:*';
                  pkg.scripts['lint:md'] = 'remark -i .gitignore --no-stdout --use remark-lint *.md';
                  pkg.scripts['lint:docs'] = 'remark -i .gitignore /docs --no-stdout --use remark-lint docs/*.md';

                  // TODO add react style guide scripts
                }

                _fs2.default.writeFile(path, JSON.stringify(pkg, null, 2), function (err) {
                  if (err) {
                    reject(err);
                  }

                  console.log('' + _chalk2.default.yellow('Successfully updated ' + path));
                  console.log('');

                  resolve();
                });
              } catch (err) {
                reject(err);
              }
            }));

          case 1:
          case 'end':
            return _context4.stop();
        }
      }
    }, _callee4, this);
  }));

  return function updatePackageJson(_x3, _x4, _x5, _x6) {
    return _ref5.apply(this, arguments);
  };
}();

/**
 * Copy template files into the docs directory.
 *
 * @param  {String} packagePath Path to package.json directory
 * @return {Void}             Templated files copied to docs directory
 */
var copyFiles = function () {
  var _ref6 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee5(packagePath) {
    var docsPath, templatePath;
    return _regenerator2.default.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            docsPath = _path2.default.join(_path2.default.dirname(packagePath), 'docs');
            templatePath = _path2.default.join(__dirname, 'templates/*.*');


            (0, _copy2.default)(templatePath, docsPath, function (err, files) {
              if (err) {
                console.log(err);
              }
            });

          case 3:
          case 'end':
            return _context5.stop();
        }
      }
    }, _callee5, this);
  }));

  return function copyFiles(_x7) {
    return _ref6.apply(this, arguments);
  };
}();

/**
 * Entry point.
 *
 * @return {Void}
 */
// Main functionality!


var main = function () {
  var _ref7 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee6() {
    var args, packagePath, codeDocs, reactDocs, pkgPath, pkgJson;
    return _regenerator2.default.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            args = parser.parseArgs(process.argv.slice(2));
            packagePath = args.packagePath, codeDocs = args.codeDocs, reactDocs = args.reactDocs;
            pkgPath = packagePath === null ? _path2.default.resolve('.', 'package.json') : _path2.default.resolve(packagePath, 'package.json');


            console.log({ pkgPath: pkgPath });

            pkgJson = null;
            _context6.prev = 5;

            pkgJson = require(pkgPath);
            _context6.next = 13;
            break;

          case 9:
            _context6.prev = 9;
            _context6.t0 = _context6['catch'](5);

            console.log('' + _chalk2.default.red(_context6.t0));
            return _context6.abrupt('return');

          case 13:
            _context6.next = 15;
            return printHeadingAndArt();

          case 15:

            console.log('');
            console.log('' + _chalk2.default.yellow('Welcome to Skan.io doctool.'));
            console.log('');
            console.log('' + _chalk2.default.yellow('==> Updating package.json scripts...'));

            _context6.next = 21;
            return updatePackageJson(pkgJson, pkgPath, codeDocs, reactDocs);

          case 21:

            console.log('');
            console.log('' + _chalk2.default.yellow('==> Downloading and installing docsify-cli...'));

            _context6.next = 25;
            return tryLogCommand('npm i -g docsify-cli && npm i -D docsify-cli');

          case 25:

            console.log('' + _chalk2.default.yellow('docsify-cli successfully installed.'));

            if (!codeDocs) {
              _context6.next = 37;
              break;
            }

            console.log('');
            console.log('' + _chalk2.default.yellow('==> Downloading and installing babel-core and babel-cli'));

            _context6.next = 31;
            return tryLogCommand('npm i babel-core babel-cli');

          case 31:

            console.log('' + _chalk2.default.yellow('babel successfully installed.'));
            console.log('');
            console.log('' + _chalk2.default.yellow('==> Downloading and installing jsdoc and jsdoc-babel'));

            _context6.next = 36;
            return tryLogCommand('npm i -g jsdoc jsdoc-babel && npm i -D jsdoc jsdoc-babel');

          case 36:

            console.log('' + _chalk2.default.yellow('jsdoc successfully installed.'));

          case 37:

            console.log('');
            console.log('' + _chalk2.default.yellow('==> Downloading and installing remark-cli and remark-lint...'));

            _context6.next = 41;
            return tryLogCommand('npm i remark-cli remark-lint');

          case 41:

            console.log('' + _chalk2.default.yellow('remark-lint and remark-cli successfully installed.'));
            console.log('');
            console.log('' + _chalk2.default.yellow('==> Downloading and installing npm-run-all...'));

            _context6.next = 46;
            return tryLogCommand('npm i npm-run-all');

          case 46:

            console.log('' + _chalk2.default.yellow('npm-run-all successfully installed.'));

            console.log('');
            console.log('' + _chalk2.default.yellow('==> Downloading and installing serve...'));

            _context6.next = 51;
            return tryLogCommand('npm i -D serve && npm i -g serve');

          case 51:

            console.log('' + _chalk2.default.yellow('serve successfully installed.'));

            console.log('');
            console.log('' + _chalk2.default.yellow('==> Copying template files...'));

            _context6.next = 56;
            return copyFiles(pkgPath);

          case 56:

            console.log('');
            console.log('' + _chalk2.default.green('Successfully installed project docs template!'));

          case 58:
          case 'end':
            return _context6.stop();
        }
      }
    }, _callee6, this, [[5, 9]]);
  }));

  return function main() {
    return _ref7.apply(this, arguments);
  };
}();

var _child_process = require('child_process');

var _argparse = require('argparse');

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _asciiArt = require('ascii-art');

var _asciiArt2 = _interopRequireDefault(_asciiArt);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _copy = require('copy');

var _copy2 = _interopRequireDefault(_copy);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * 'skan-convert' binary version.
 *
 * @const
 * @type {String}
 */
var version = '1.0.8';

/**
 * Pass the commandline arguments through argparse module.
 *
 * @const
 * @type {ArgumentParser}
 */
var parser = new _argparse.ArgumentParser({
  version: version,
  addHelp: true,
  description: 'A command line tool to help install skan.io doc tools and serve example usage',
  epilog: '(DEFAULT) Will download docsify-cli, add \'docs:proj\', \'docs:proj:serve\',\n  and docs:proj:build scripts to your project package-lock.json, will start a\n  gh-pages branch on your repo at the current HEAD and will tag it with version\n  v' + version,
  prog: 'npm start'
});

var defaultPath = null;
var defaultServe = false;

parser.addArgument(['-p', '--package'], {
  help: 'Choose the path to your package.json',
  action: 'store',
  defaultValue: defaultPath,
  dest: 'packagePath',
  metavar: '<PATH>'
});
parser.addArgument(['--no-code'], {
  help: 'If true will not set up code docs with jsdoc',
  action: 'storeFalse',
  defaultValue: true,
  dest: 'codeDocs'
});
parser.addArgument(['--no-react'], {
  help: 'If true will not set up react component style guide',
  action: 'storeFalse',
  defaultValue: true,
  dest: 'reactDocs'
});;;;;;

main();
